services:
    Monolith\CMSBundle\Controller\:
        resource: '../../Controller'
        tags: ['controller.service_arguments']

    Monolith\CMSBundle\Command\:
        resource: '../../Command'

    Symfony\Component\HttpKernel\Profiler\Profiler: '@profiler'
#    Symfony\Component\Stopwatch\Stopwatch: '@stopwatch'

    Monolith\CMSBundle\Cache\CmsCacheProvider:
        alias: cms.cache

    # Commands
    cms.command.themes_create_symlinks:
        class: Monolith\CMSBundle\Command\CreateThemesSymlinkCommand
        calls:
            - [ setContainer, [ '@service_container' ] ]
        tags:
            - { name: console.command, command: 'cms:themes:create-symlinks' }

    # Menu selected items
    cms.menu.voter.request:
        class: Monolith\CMSBundle\Menu\RequestVoter
        arguments:
            - '@request_stack'
            - "%admin_path%"
        tags:
            - { name: knp_menu.voter }
    # Twig
    cms.twig.extension:
        class: Monolith\CMSBundle\Twig\CmsExtension
        arguments: [ '@service_container' ]
        tags:
            - { name: twig.extension }
    cms.twig.theme_asset_extension:
        class: Monolith\CMSBundle\Twig\ThemeAssetExtension
        arguments: [ '@assets.packages', '@service_container' ]
        tags:
            - { name: twig.extension }
    cms.twig.html_title_extension:
        class: Monolith\CMSBundle\Twig\HtmlTitleExtension
        arguments: [ '@cms.breadcrumbs', '@settings' ]
        tags:
            - { name: twig.extension }

    # CMS
    cms.data_collector:
        class: Monolith\CMSBundle\DataCollector\CmsCollector
        public: true
        arguments: [ '@service_container']
        tags:
            - { name: data_collector, id: cms, template: "@CMS/Profiler/cms.html.twig", priority: 200 }
    cms.breadcrumbs:
        class: Monolith\CMSBundle\Tools\Breadcrumbs
        public: true
    Monolith\CMSBundle\Tools\Breadcrumbs:
        alias: cms.breadcrumbs

    cms.context:
        class: Monolith\CMSBundle\Manager\ContextManager
        public: true
        arguments: [ '@service_container', '@fos_user.user_manager', '@?debug.stopwatch' ]
    Monolith\CMSBundle\Manager\ContextManager:
        alias: cms.context

    cms.router:
        class: Monolith\CMSBundle\Router\CmsRouter
        public: true
        calls:
            - [ setContainer, [ '@service_container' ] ]
    Monolith\CMSBundle\Router\CmsRouter:
        alias: cms.router

    cms.routes.module_admin.loader:
        class: Monolith\CMSBundle\Router\ModuleAdminRoutesLoader
        calls:
            - [ setContainer, [ '@service_container' ] ]
            - [ setResolver,  [ '@routing.resolver' ] ]
        tags:
            - { name: routing.loader }

#    cms.routes.modules.loader:
#        class: Monolith\CMSBundle\Router\ModuleRoutesLoader
#        calls:
#            - [ setContainer, [ '@service_container' ] ]
#            - [ setResolver,  [ '@routing.resolver' ] ]
#        tags:
#            - { name: routing.loader }

    cms.routes.modules.loader.annotation:
        class: Monolith\CMSBundle\Router\ModuleRoutesAnnotaionLoader
        arguments: [ '@annotations.reader' ]
        calls:
            - [ setKernel, [ '@kernel' ] ]
            - [ setResolver,  [ '@routing.resolver' ] ]
        tags:
            - { name: routing.loader }

    cms.folder:
        class: Monolith\CMSBundle\Manager\FolderManager
        public: true
        arguments: [ '@service_container' ]
    Monolith\CMSBundle\Manager\FolderManager:
        alias: cms.folder

    cms.module:
        class: Monolith\CMSBundle\Manager\ModuleManager
        public: true
        arguments: [ '@kernel' ]
    Monolith\CMSBundle\Manager\ModuleManager:
        alias: cms.module

    cms.node:
        class: Monolith\CMSBundle\Manager\NodeManager
        public: true
        arguments:
            - '@doctrine.orm.default_entity_manager'
            - '@form.factory'
            - '@kernel'
            - '@cms.context'
            - '@cms.cache'
        calls:
            - [ setContainer, [ '@service_container' ] ]
    Monolith\CMSBundle\Manager\NodeManager:
        alias: cms.node

    cms.region:
        class: Monolith\CMSBundle\Manager\RegionManager
        public: true
        arguments: [ '@doctrine.orm.default_entity_manager', '@form.factory', '@cms.context' ]
    Monolith\CMSBundle\Manager\RegionManager:
        alias: cms.region

    cms.security:
        class: Monolith\CMSBundle\Manager\SecurityManager
        public: true
        arguments: [ '@service_container' ]
    Monolith\CMSBundle\Manager\SecurityManager:
        alias: cms.security

    cms.site:
        class: Monolith\CMSBundle\Manager\SiteManager
        public: true
        arguments: [ '@service_container' ]
    Monolith\CMSBundle\Manager\SiteManager:
        alias: cms.site

    cms.syslog:
        class: Monolith\CMSBundle\Manager\SyslogManager
        public: true
        arguments: [ '@service_container' ]
    Monolith\CMSBundle\Manager\SyslogManager:
        alias: cms.syslog

    cms.theme:
        class: Monolith\CMSBundle\Manager\ThemeManager
        public: true
        arguments: [ '@service_container' ]
    Monolith\CMSBundle\Manager\ThemeManager:
        alias: cms.theme

    cms.toolbar:
        class: Monolith\CMSBundle\Manager\ToolbarManager
        public: true
        calls:
            - [ setContainer, [ '@service_container' ] ]
    Monolith\CMSBundle\Manager\ToolbarManager:
        alias: cms.toolbar

    # Forms
    cms.form.type.folder:
        class: Monolith\CMSBundle\Form\Type\FolderFormType
        calls:
            - [ setContainer, [ '@service_container' ] ]
        tags:
            - { name: form.type, alias: cms_folder }
    cms.form.type.folder_tree:
        class: Monolith\CMSBundle\Form\Tree\FolderTreeType
        arguments: [ '@doctrine' ]
        calls:
            - [ setContext, [ '@cms.context' ] ]
        tags:
            - { name: form.type, alias: cms_folder_tree }
    cms.form.type.node:
        class: Monolith\CMSBundle\Form\Type\NodeFormType
        arguments: [ '@cms.context', '@cms.module', '@cms.theme']
        tags:
            - { name: form.type, alias: cms_node }
    cms.form.type.site:
        class: Monolith\CMSBundle\Form\Type\SiteFormType
        arguments: [ '@cms.theme']
        tags:
            - { name: form.type, alias: cms_site }
    cms.form.type.node_setup_controller:
        class: Monolith\CMSBundle\Form\Type\NodeSetupControllerFormType
        arguments: [ '@cms.theme', '@cms.node' ]
        tags:
            - { name: form.type, alias: cms_node }
    cms.form.type.user:
        class: Monolith\CMSBundle\Form\Type\UserFormType
        arguments: [ '@doctrine.orm.default_entity_manager', "%user_class%" ]
        tags:
            - { name: form.type, alias: monolith_cms_user }
    cms.form.type.extension.node_id:
        class: Monolith\CMSBundle\Form\Extension\FormTypeNodeIdExtension
        arguments: [ '@cms.context' ]
        tags:
            - { name: form.type_extension, alias: form, extended_type: Symfony\Component\Form\Extension\Core\Type\BaseType }
    cms.form.registration.admin.factory:
        class: FOS\UserBundle\Form\Factory\FormFactory
        public: true
        arguments: [ '@form.factory', "%fos_user.registration.form.name%", Monolith\CMSBundle\Form\Type\UserFormType, "%fos_user.registration.form.validation_groups%" ]
    cms.form.profile.admin.factory:
        class: FOS\UserBundle\Form\Factory\FormFactory
        public: true
        arguments: [ '@form.factory', "%fos_user.profile.form.name%", Monolith\CMSBundle\Form\Type\UserFormType, "%fos_user.profile.form.validation_groups%" ]

    # Listeners
    cms.resolve_controller_name_subscriber:
        class: Monolith\CMSBundle\Listener\ResolveControllerNameSubscriber
        arguments: [ '@controller_name_converter', '@cms.node', '@kernel']
        tags:
            - { name: kernel.event_subscriber }
    cms.warmap.listener:
        class: Monolith\CMSBundle\Listener\WarmupDataListener
        arguments: [ '@service_container', '%kernel.cache_dir%', '%kernel.debug%' ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onRequest }
    cms.site.switch.listener:
        class: Monolith\CMSBundle\Listener\SiteSwitchListener
        arguments: [ '@service_container' ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onRequest }
    cms.controller.listener:
        class: Monolith\CMSBundle\Listener\ModuleControllerModifierListener
        arguments: [ '@cms.context', '@cms.folder', '@cms.module', '@cms.node', '@settings', '@twig.loader' ]
        tags:
            - { name: kernel.event_listener, event: kernel.controller, method: onController }
    cms.request.listener:
        class: Monolith\CMSBundle\Listener\ModuleControllerModifierListener
        arguments: [ '@cms.context', '@cms.folder', '@cms.module', '@cms.node', '@settings', '@twig.loader' ]
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onRequest }
    cms.response.listener:
        class: Monolith\CMSBundle\Listener\ModuleControllerModifierListener
        arguments: [ '@cms.context', '@cms.folder', '@cms.module', '@cms.node', '@settings', '@twig.loader' ]
        tags:
            - { name: kernel.event_listener, event: kernel.response, method: onResponse }
    cms.view.listener:
        class: Monolith\CMSBundle\Listener\ModuleControllerModifierListener
        arguments: [ '@cms.context', '@cms.folder', '@cms.module', '@cms.node', '@settings', '@twig.loader' ]
        tags:
            - { name: kernel.event_listener, event: kernel.view, method: onView }
    #    cms.db.table_prefix_subscriber:
    #        class: Monolith\CMSBundle\Listener\TablePrefixSubscriber
    #        arguments: [ "%database_table_prefix%" ]
    #        public: false
    #        tags:
    #            - { name: doctrine.event_subscriber }
    cms.doctrine_subscriber:
        class: Monolith\CMSBundle\Listener\DoctrineSubscriber
        arguments: [ '@service_container' ]
        public: true
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }
            #- { name: doctrine.event_listener, event: postPersist }
            #- { name: doctrine.event_listener, event: preFlush }
            #- { name: doctrine.event_listener, event: onFlush }
            #- { name: doctrine.event_listener, event: postFlush }
